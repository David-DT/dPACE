const Hasher = require('./lib/hasher.js');
const PrivateKey = require('./lib/privateKey.js');
const Prng = require('./lib/prng.js');
const Web3 = require('web3');

const assert = require('assert');
const elliptic = require('elliptic'); //Added alt_bn128 curve for this to work.

const hasher = new Hasher();
const prng = new Prng();
const web3 = new Web3();

//PrivateKey needs to be generated by multpilying real private key, with accessToken
const msg = 'one ring to rule them all!';
for (let i=0; i<10; i++){
    console.log("Private Key used in signature", i,":", prng.random);
}

//Ring Signature on JavaScript is not working. Only use this script to generate random numbers. Sage helps with finding the public keys.

/*
//Check whether, keys are created correctly -> in the end, we will need to generate one-time secret key
const foreign_keys = [new PrivateKey(prng.random, hasher).public_key,
    new PrivateKey(prng.random, hasher).public_key];
    
// Checks whether correct signature happened
const signature = key.sign(msg,foreign_keys);
const public_key = signature.public_key;
console.log(signature.verify(msg,public_key));
*/