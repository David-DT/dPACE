const Hasher = require('./lib/hasher.js');
const PrivateKey = require('./lib/privateKey.js');
const Prng = require('./lib/prng.js');
const assert = require('assert');
const ethCrypto = require('eth-crypto');
const elliptic = require('elliptic');

const Web3 = require('web3');

const web3 = new Web3();
const hasher = new Hasher();


//PrivateKey needs to be generated by multpilying real private key, with accessToken
const msg1 = 'one ring to rule them all!';
const msg2 = 'Sauron';

identity1 = ethCrypto.createIdentity()

const key = new PrivateKey(identity1, hasher);

//Check whether, keys are created correctly -> in the end, we will need to generate one-time secret key

const foreign_keys1 = [new PrivateKey(ethCrypto.createIdentity(),hasher).public_key,
    new PrivateKey(ethCrypto.createIdentity(),hasher).public_key];
    
const foreign_keys2 = [new PrivateKey(ethCrypto.createIdentity(),hasher).public_key,
        new PrivateKey(ethCrypto.createIdentity(),hasher).public_key];


// Checks whether correct signature happened
const signature = key.sign(msg,foreign_keys);
const public_keys = signature.public_keys;
console.log(signature.verify(msg,public_keys));
